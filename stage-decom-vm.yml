
---
 - name: Stage a VM for decommissioning
   become: false
   hosts: "{{ stage_vm }}"
   gather_facts: true
   

   vars:
     current_date: "{{ ansible_date_time.date }}"
     stage_report_path: /home/lab-user/stage-report.csv
       #stage_vm: 
       #stage_vm_controller_name:
       #staging_folder: 
       #vsphere_datacenter: 
       #decom_delay: number of days you want the vm to exist in the staging folder and host group
       #controller_inventory: the inventory of the host you want to stage 


   tasks:

   - name: print all hosts this play is targeting
     debug:
       var: play_hosts
     delegate_to: localhost
     

   - name: Gather some info from a guest using the vSphere API output schema
     community.vmware.vmware_guest_info:
       hostname: "{{ vcenter_hostname }}"
       username: "{{ vcenter_username }}"
       password: "{{ vcenter_password }}"
       datacenter: "{{ vsphere_datacenter }}"
       name: "{{ stage_vm }}"
       validate_certs: false
       #schema: "vsphere"
       #properties: ["config.hardware.memoryMB", "guest.disk", "overallStatus"]
     delegate_to: localhost
     register: vcenter_guest_info

   - name: Print stage vm info
     debug:
       var: vcenter_guest_info
     delegate_to: localhost


   - name: Set deletion date
     command: "date +'%d-%m-%Y' -d '+{{ decom_delay }} days'"
     register: deletion_date
     delegate_to: localhost

   - name: Save deletion date as fact
     set_fact:
       vm_deletion_date: "{{ deletion_date.stdout }}"
       cacheable: yes

   - name: Save raw stage date
     set_fact:
       unformatted_vm_stage_date: "{{ ansible_date_time.date }}" #add date-time filter to fix formatting
       cacheable: yes

   - name: Save stage date as fact (date reformatted for later use)
     set_fact:
       vm_stage_date: "{{ delim_stage_date.1 }}-{{ delim_stage_date.2 }}-{{ delim_stage_date.0 }}"
       cacheable: yes
     vars:
       raw_stage_date: "{{ unformatted_vm_stage_date }}"
       delim_stage_date: "{{ raw_stage_date.split('-') }}"

   - name: Set difference between stage and deletion date 
     set_fact:
       stage_deletion_date_diff: "{{ (( vm_deletion_date | to_datetime('%d-%m-%Y')) - ( current_date | to_datetime('%Y-%m-%d'))).days }}"
       cacheable: yes

   - name: Initialize vm_is_decomissioned variable (cached for later use in check-and-decom playbook)
     set_fact:
       vm_is_decommissioned: "{{ 'True' if (stage_deletion_date_diff | int) <= 0 else 'False'}}"
       cacheable: yes

   - name: Add host to stage-decom inventory group
     awx.awx.group:
        name: decommissioning_stage
        controller_host: "{{ controller_hostname }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        inventory: "{{ controller_inventory }}"
        state: present
        hosts:
          - "{{ stage_vm }}"
        preserve_existing_hosts: True
        #preserve_existing_children: True
     delegate_to: localhost

   - name: Update host vars
     awx.awx.host:
       name: "{{ stage_vm }}"
       controller_host: "{{ controller_hostname }}"
       controller_username: "{{ controller_username }}"
       controller_password: "{{ controller_password }}"
       inventory: "{{ controller_inventory }}"
       state: present
       variables:
         stage_date_var: "{{ vm_stage_date }}"
         deletion_date_var: "{{ vm_stage_date }}"
         #ansible_host: pull ip or hostname from using vmwar vminfo module
     delegate_to: localhost

  #  - name: Move to vm to staging folder
  #    community.vmware.vmware_guest_move:
  #      hostname: "{{ vcenter_hostname }}"
  #      username: "{{ vcenter_username }}"
  #      password: "{{ vcenter_password }}"
  #      datacenter: "{{ vsphere_datacenter }}"
  #      name: "{{ stage_vm }}"
  #      dest_folder: "{{ staging_folder }}" #"/{{ datacenter }}/vm"
  #      validate_certs: false
  #    delegate_to: localhost
   

       
