---
 - name: Check age of VMs in stage inventory group, move to new vmware decom folder, initiate decomissioning
   become: false
   hosts: decomissioning-stage #this is the inventory host group targeting stage vms for decommissioning
   gather_facts: true

   # vars:
   #   decom_vm: 
   #   staging_folder: 
   #   stage_vm
     

   tasks:        
   
     - name: Gather info on vm to decommission
       community.vmware.vmware_vm_info:
         hostname: '{{ vcenter_hostname }}'
         username: '{{ vcenter_username }}'
         password: '{{ vcenter_password }}'
         #folder: '{{ staging_folder }}'
         vm_name: '{{ stage_vm }}'
         show_tag: true
       #with_items: "{{ ansible_play_hosts }}"
       delegate_to: localhost
       register: vm_info
       

     - name: Display tags related to vm
       debug:
         msg: "{{ vm_info }}"

     - name: Store stage date tag as fact
       set_fact:
         stage_tag: "{{ item }}"
       loop: "{{ vm_info.virtual_machines[0].tags | json_query(query) }}"
       vars:
         query: "[?category_name==`stage-date`]"

     - name: Store deletion date tag as fact
       set_fact:
         decom_tag: "{{ item }}"
       loop: "{{ vm_info.virtual_machines[0].tags | json_query(query) }}"
       vars:
         query: "[?category_name==`deletion-date`]"

     - name: Print deletion date
       debug:
         msg: "{{ decom_tag.name }}"       

     - name: Check if deletion date has been reach on vm
       debug:
         msg: "{{ ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days }}"

     #Place decomissioning steps below this line

    #  - name: Set the state of a virtual machine to poweroff
    #    community.vmware.vmware_guest_powerstate:
    #      hostname: "{{ vcenter_hostname }}"
    #      username: "{{ vcenter_username }}"
    #      password: "{{ vcenter_password }}"
    #      #folder: "/{{ datacenter_name }}/vm/my_folder"
    #      name: "{{ stage_vm }}"
    #      state: powered-off
    #    delegate_to: localhost
    #    register: deploy
    #    when: ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days =< 0

    #  - name: Remove an A record from the system
    #    nios_a_record:
    #      name: #REPLACEME
    #      ipv4: #REPLACEME
    #      state: absent
    #      provider:
    #        host: "{{ inventory_hostname_short }}"
    #        username: "{{ infoblox_username }}"
    #        password: "{{ infoblox_password }}"
    #    connection: local
    #    when: ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days =< 0


    #  - name: Delete a PTR Record
    #    nios_ptr_record:
    #      ipv4: #REPLACEME 
    #      ptrdname: #REPLACEME
    #      state: absent
    #      provider:
    #        host: "{{ inventory_hostname_short }}"
    #        username: "{{ infoblox_username }}"
    #        password: "{{ infoblox_password }}"
    #    connection: local
    #    when: ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days =< 0



