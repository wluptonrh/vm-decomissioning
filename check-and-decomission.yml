---
 - name: Check age of VMs in stage inventory group, move to new vmware decom folder, initiate decomissioning
   become: false
   hosts: decommissioning_stage #this is the inventory host group targeting stage vms for decommissioning
   gather_facts: true

   vars:
     stage_report_path: /home/lab-user/stage-report.csv
     current_date: "{{ ansible_date_time.date | to_datetime('%m-%d-%Y') }}"
   #   decom_vm: 
   #   staging_folder: 
   #   stage_vm
   #   stage_report_path:
     

   tasks:        
   
     - name: Print deletion_date_var
       debug: 
         msg: "{{ deletion_date_var }}"

     - name: Print current_date_var
       debug: 
         msg: "{{ current_date }}"

     - name: Set difference between stage and deletion date 
       set_fact:
         stage_deletion_date_diff: "{{ (( deletion_date_var | to_datetime('%m-%d-%Y')) - ( current_date | to_datetime('%m-%d-%Y'))).days }}"

     - name: Print stage_deletion_date_diff
       debug:
         var: "{{ stage_deletion_date_diff }}"


     - name: Initialize vm_is_decomissioned variable (cached for later use in check-and-decom playbook)
       set_fact:
         ready_to_decommission: "{{ 'True' if (stage_deletion_date_diff | int) <= 0 else 'False'}}"   

     - name: Print is_decommissioned
       debug:
         msg: "{{ ready_to_decommission }}"

     #Place decomissioning steps below this line

    #  - name: Set the state of a virtual machine to poweroff
    #    community.vmware.vmware_guest_powerstate:
    #      hostname: "{{ vcenter_hostname }}"
    #      username: "{{ vcenter_username }}"
    #      password: "{{ vcenter_password }}"
    #      #folder: "/{{ datacenter_name }}/vm/my_folder"
    #      name: "{{ stage_vm }}"
    #      state: powered-off
    #    delegate_to: localhost
    #    register: deploy
    #    when: ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days =< 0

    #  - name: Remove an A record from the system
    #    nios_a_record:
    #      name: #REPLACEME
    #      ipv4: #REPLACEME
    #      state: absent
    #      provider:
    #        host: "{{ inventory_hostname_short }}"
    #        username: "{{ infoblox_username }}"
    #        password: "{{ infoblox_password }}"
    #    connection: local
    #    when: ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days =< 0


    #  - name: Delete a PTR Record
    #    nios_ptr_record:
    #      ipv4: #REPLACEME 
    #      ptrdname: #REPLACEME
    #      state: absent
    #      provider:
    #        host: "{{ inventory_hostname_short }}"
    #        username: "{{ infoblox_username }}"
    #        password: "{{ infoblox_password }}"
    #    connection: local
    #    when: ((decom_tag.name | to_datetime('%d-%m-%Y')) - ( ansible_date_time.date | to_datetime('%Y-%m-%d') )).days =< 0




    # (no longer needed) This was a previous approach that saved stage and deletion dates as tags in vmware

        #  - name: Gather info on vm to decommission
    #    community.vmware.vmware_vm_info:
    #      hostname: '{{ vcenter_hostname }}'
    #      username: '{{ vcenter_username }}'
    #      password: '{{ vcenter_password }}'
    #      #folder: '{{ staging_folder }}'
    #      vm_name: '{{ stage_vm }}'
    #      show_tag: true
    #    #with_items: "{{ ansible_play_hosts }}"
    #    delegate_to: localhost
    #    register: vm_info
       

    #  - name: Display tags related to vm
    #    debug:
    #      msg: "{{ vm_info }}"

    #  - name: Store stage date tag as fact
    #    set_fact:
    #      stage_tag: "{{ item }}"
    #    loop: "{{ vm_info.virtual_machines[0].tags | json_query(query) }}"
    #    vars:
    #      query: "[?category_name==`stage-date`]"

    #  - name: Store deletion date tag as fact
    #    set_fact:
    #      decom_tag: "{{ item }}"
    #    loop: "{{ vm_info.virtual_machines[0].tags | json_query(query) }}"
    #    vars:
    #      query: "[?category_name==`deletion-date`]"

    #  - name: Print deletion date
    #    debug:
    #      msg: "{{ decom_tag.name }}"       